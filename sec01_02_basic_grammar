# 1. 변수

## 1-1. 변수란?

- 데이터를 임시로 담을 수 있는 상자, 즉 메모리 공간

## 1-2. 변수 선언과 초기화

`int i = 10;`

- int i : 선언부
  - int : 자료형
  - i : 변수 이름
- 10 : 초기화 및 변수값
- = : 대입 연산자

```java
// 변수 선언 및 초기화를 동시에
int i = 10;
// 변수 선언 및 초기화를 따로
int j;
j = 100;
```

## 1-3. 메모리 할당과 진법

- 1 byte = 8 bit
- int 자료형 = 4 byte

## 1-4. 변수 데이터 변경

```java
int num = 10; // 10
num = 20; // 20
num = 0; // 0
```



# 2. 기본자료형

## 2-1. 기본 자료형과 객체 자료형

- 기본 자료형(정수, 실수, 문자, 문자열, 불리언)은 데이터가 변수에 직접 저장 - 메모리 크기가 다양
- 객체 자료형은 **객체 메모리 주소**가 변수에 저장 (C계열에서는 포인터, Java에서는 레퍼런스(참조) 라고 일컬음) - 메모리 크기가 4 byte 로 고정



## 2-2. Java 기본 자료형

- 정수형
  - byte : 1 byte (-127~127)
  - **char** : 2 byte (문자; ASCII)
  - short : 2 byte
  - **int** : 4 byte
  - long : 8 byte
- 실수형
  - float : 4 byte
  - **double** : 8 byte
- 논리형
  - **boolean** : 1 byte



- ~~문자열~~ : 객체 자료형임
  - **S**tring

## 2-3. 형 변환

- 자동적(묵시적) 형 변환: 작은 공간의 메모리에서 큰 공간의 메모리로 이동

```java
byte by = 10; // 10
int in = by; // 10
```

- 명시적 형 변환: 큰 공간의 메모리에서 작은 공간의 메모리로 이동 => **데이터 누실 가능** 

```java
int iVar = 123456; // 123456
byte bVar = (byte)iVar; // 64
```



# 3. 특수 문자와 서식 문자

## 3-1. 특수 문자

```java
// 한 줄 주석입니다.
/*
이것은
여러 줄
주석입니다.
*/
System.out.println("Good\tMorning"); // \t 탭
System.out.println("Good\nMorning"); // \n 줄 바꿈
System.out.println("\'Good Morning\'"); // \' 작은 따옴표 출력
System.out.println("\"Good Morning\""); // \" 큰 따옴표 출력
System.out.println("Good\\Morning"); // \\ 역슬래쉬 출력
```



## 3-2. 서식 문자

- printf() 메서드 이용

```java
System.out.println("오늘의 기온은 10도 입니다."); // 자동 개행
System.out.printf("오늘의 기온은 %d도 입니다.\n", 10); // 자동 개행 x

System.out.printf("홍길동의 정보: %d학년 %d반\n", 6, 2);

//정수 %d, %o, %x
int num = 30;
System.out.printf("num2(10진수) : %d\n", num); // 10
System.out.printf("num2(8진수) : %o\n", num); // 36
System.out.printf("num2(16진수) : %x\n", num); // 1e

// 문자 %c
System.out.printf("소문자 \'%c\'의 대문자는 \'%c\'입니다.\n", 'a', 'A');
  
//문자열 %s
System.out.printf("\'%s\'을 대문자로 바꾸면 \'%s\'입니다.\n", "java", "JAVA");

//실수 %f
float f = 1.23f;
System.out.printf("f = %f\n", f); // 1.230000

double d = 1.23456d;
System.out.printf("d = %f\n", d); // 1.23456
```



## 3-3. 서식 문자의 정렬과 소수점 제한 기능

```java
System.out.printf("%d\n", 123);   // 123
System.out.printf("%d\n", 1234);  // 1234
System.out.printf("%d\n", 12345); // 12345

// 전체 칸 수는 5칸, 오른쪽 정렬
System.out.printf("%5d\n", 123);   //   123
System.out.printf("%5d\n", 1234);  //  1234
System.out.printf("%5d\n", 12345); // 12345

// 소수점 제한
System.out.printf("%f\n", 1.23); // 1.230000
System.out.printf("%.0f\n", 1.23); // 1
System.out.printf("%.1f\n", 1.23); // 1.2
System.out.printf("%.2f\n", 1.23); // 1.23
System.out.printf("%.3f\n", 1.23); // 1.230
```



# 4. 연산자

## 4-1. 피연산자 개수에 의한 연산자 구분

- 단항 연산자 : `+x`, `-x`, `!x`
- 이항 연산자 : `x=y`, `x<y`, `x!=y`
- 삼항 연산자 : `조건식: true? false`

## 4-2. 대입(할당) 연산자

```java
int x = 10;
int y = 20;
x = y // x = 20
```



## 4-3. 산술 연산자

- `+`, `-`, `*`, `/`, `%`

## 4-4. 복합 대입연산자

- `+=`, `-=`, `*=`, `/=`, `%=`

## 4-5. 관계 연산자

- `>`, `<`, `>=`, `<=`, `==`, `!=`

## 4-6. 증강 연산자

- `++`, `--` : 1만큼 증가 또는 감소

```java
// 전위연산: 연산을 먼저 실행
int x = 10;
System.out.println("++x: " + (++x)); // ++x: 11
x = 10;
System.out.println("--x: " + (--x)); // --x: 9

// 후위연산: 연산을 후에 실행
x = 10;
System.out.println("x++: " + (x++)); // x++: 10
System.out.println("x: " + x); // x: 11
x = 10;
System.out.printnl("x--: " + (x--)); // x--: 10
System.out.println("x: " + x); // x: 9
```



## 4-7. 논리 연산자

- `&&`, `||`, `!` : AND, OR, NOT



## 4-8. 조건(삼항) 연산자

- `조건식? 식1 : 식2` => 조건식이 참이면 식1 실행, 거짓이면 식2 실행

```java
int x = 10;
int y = 20;
int result = 0;

result = (x > y)? 100 : 200;
System.out.println("result: " + result); // result: 200

result = (x < y)? 100 : 200;
System.out.println("result: " + result); // result: 100

result = (x == y)? 100 : 200;
System.out.println("result: " + result); // result: 200
```



## 4-9. 비트 연산자

- 데이터를 bit 단위로 환산하여 연산을 수행하며, 다른 연산자보다 연산 속도가 (미세하게) 향상됨.
- `&`, `|`, `^` : AND, OR, XOR
  - `a^b`: a와 b가 같지 않으면 1

```java
int x = 2; // 10
int y = 3; // 11
System.out.println("x & y:" + (x & y)); // x & y: 2
System.out.println("x | y:" + (x | y)); // x & y: 3
System.out.println("x ^ y:" + (x ^ y)); // x & y: 1

```



# 5. 배열

## 5-1. 배열이란?

- **인덱스**를 이용하여 **자료형이 같은** 데이터를 관리
- Java 배열은 배열 선언시 **배열의 크기가 고정**

## 5-2. 배열 선언 및 초기화

```java
// 배열 선언 후 초기화
int[] arr1 = new int[5]; // 배열 원소들의 자료형, 배열 이름, 배열 크기 명시
arr1[0] = 100;
arr1[1] = 200;

System.out.println("arr1[0]: " + arr1[0]); // arr1[0]: 100
System.out.println("arr1[0]: " + arr1[1]); // arr1[1]: 200

// 배열 선언과 동시에 초기화
int[] arr2 = {10, 20}; // **중괄호**

System.out.println("arr2[0]: " + arr2[0]); // arr2[0]: 10
System.out.println("arr2[0]: " + arr2[1]); // arr2[1]: 20
```



## 5-3. 배열을 이용한 학사관리

```java
String[] name = {"박찬호", "이승엽"};
int[] score = new int[2];
Scanner scanner = new Scanner(System.in); // Scanner: 유저 인풋 받을 때 사용하는 클래스

System.out.printf("%s의 점수를 입력하시오.: ", name[0]);
score[0] = scanner.nextInt();
System.out.printf("%s의 점수를 입력하시오.: ", name[1]);
score[1] = scanner.nextInt();

System.out.printf("%s 점수:\t%.2f\n", name[0], (double)score[0]);
System.out.printf("%s 점수:\t%.2f\n", name[1], (double)score[1]);

double ave = (double)(score[0] + score[1]) / 2;
System.out.printf("---------------------\n평 점:\t%.2f", ave);

scanner.close(); // 사용했던 리소스 반환
```

# 6. 배열과 메모리

## 6-1. 배열의 메모리 크기

- 배열을 구성하는 데이터의 자료형에 따라 배열의 메모리 크기가 결정됨
  - `int[] arr = new int[3]` : 4 byte * 3 = 12 byte

## 6-2. 배열을 가리키는 배열 이름

- 기본 자료형 데이터를 담고 있는 변수와 달리 배열 변수는 배열 데이터의 주소를 담고 있음
- `int[] i_arr = new int[3]`
  - 변수 `i_arr` 메모리: i_arr[0] 이 시작하는 메모리 주소 저장

## 6-3. 배열 기본 속성

```java
int[] arrAtt1 = {10, 20};
int[] arrAtt2 = null;
int[] arrAtt3 = null;

// 배열 길이
System.out.println("arrAtt1.length: " + arrAtt1.length); // arrAtt1.length: 2

// 배열 요소 출력
System.out.println("arrAtt1: " + Arrays.toString(arrAtt1)); // arrAtt1: [10, 20]

// 배열 요소 복사 : 값만 복사, 주소는 상이
arrAtt3 = Arrays.copyOf(arrAtt1, arrAtt1.length);
System.out.println("arrAtt3: " + Arrays.toString(arrAtt3)); // arrAtt3: [10, 20]

// 배열 레퍼런스 : 주소 동일
arrAtt2 = arrAtt1;
System.out.println("arrAtt1: " + arrAtt1); // arrAtt1: [I@4554617c
System.out.println("arrAtt2: " + arrAtt2); // arrAtt2: [I@4554617c
System.out.println("arrAtt3: " + arrAtt3); // arrAtt3: [I@74a14482
```



## 6-4. 다차원 배열

```java
// 3행 2열
int[][] arrMul = new int[3][2];
arrMul[0][0] = 10;
arrMul[0][1] = 100;
arrMul[1][0] = 20;
arrMul[1][1] = 200;
arrMul[2][0] = 30;
arrMul[2][1] = 300;
```

# 7. 조건문

## 7-1. 조건문이란?

- 조건의 결과에 따라서 양자 택일 (주로 if 문) 또는 다자 택일 (주로 switch 문) 을 진행

## 7-2. if 문

- `if (조건식) {...}`
- `if (조건식) {...} else {...}`
- `if (조건식1) {...} else if (조건식2) {...} else {...}`

## 7-3. switch 문

- 비교 대상이 되는 결과값과 선택 사항이 많을 경우 주로 사용 

```java
System.out.println("점수를 입력하세요.");
Scanner inputNum = new Scanner(System.in);
int score = inputNum.nextInt();

switch (score) {
case 100:
case 90:
  System.out.println("수");
	break;  
case 80:
	System.out.println("우");
	break;
case 70:
  System.out.println("미");
  break;  
default:
  System.out.println("try again!!");
  break;
}

inputNum.close();
```

# 8. 반복문

## 8-1. 반복문이란?

- 프로그램 진행을 특정 조건에 따라 (조건이 '참'인 동안) 반복적으로 진행

## 8-2. for 문

- `for (int i = 1; i < 10; i++) {...}`
- `for (int i = 1; i < 10; i = i + 2) {...}`

## 8-3. while 문

```java
int i = 1;
while (i < 10) {
  ...
	i++;  
}
```

## 8-4. do ~ while 문

- while 문과 비슷하나 조건 결과에 관계없이 무조건 최초 한 번은 `{...}` 프로그램을 수행
- `do {...} while(i < 10)`

```java
do {
  System.out.println("조건 결과와 관계 없이 무조건 한 번은 실행됩니다.");
} while(false);
```

```java
// 3번 실행
int i = 10;
do {
  System.out.println("무조건 한 번은 실행됩니다.");
  i++;
} while (i < 13);
```
